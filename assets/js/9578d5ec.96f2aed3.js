"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[781],{7385:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var s=n(4848),r=n(8453);const o={},i="User interaction tests",l={id:"main-strategy/user-interaction",title:"User interaction tests",description:"What?",source:"@site/docs/2.main-strategy/2.user-interaction.md",sourceDirName:"2.main-strategy",slug:"/main-strategy/user-interaction",permalink:"/docs/main-strategy/user-interaction",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"About",permalink:"/docs/main-strategy/about"},next:{title:"Render regression tests",permalink:"/docs/main-strategy/render-regression"}},a={},c=[{value:"What?",id:"what",level:2},{value:"Why?",id:"why",level:2},{value:"Confidence, Clarity &amp; Regression",id:"confidence-clarity--regression",level:3},{value:"Relieves E2E test responsibilities",id:"relieves-e2e-test-responsibilities",level:3},{value:"How?",id:"how",level:2},{value:"What (not) to mock?",id:"what-not-to-mock",level:3},{value:"Where to put these tests?",id:"where-to-put-these-tests",level:3},{value:"Don&#39;t query by data-testid! \ud83d\ude23",id:"dont-query-by-data-testid-persevere",level:3},{value:"Follow RTL&#39;s recommendations",id:"follow-rtls-recommendations",level:3}];function h(e){const t={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"user-interaction-tests",children:"User interaction tests"}),"\n",(0,s.jsx)(t.h2,{id:"what",children:"What?"}),"\n",(0,s.jsxs)(t.p,{children:["According to RTL: ",(0,s.jsx)(t.a,{href:"https://testing-library.com/docs/guiding-principles",children:'"The more your tests resemble the way your software is used, the more confidence they can give you"'}),". In other words, you should test user interaction and mock as little as possible. Therefore these tests belong to the integration test category."]}),"\n",(0,s.jsx)(t.p,{children:"Examples:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"It should open the menu, when I click the menu button."}),"\n",(0,s.jsx)(t.li,{children:"It should show a validation error, when I submit an invalid form."}),"\n"]}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsx)(t.p,{children:"Little history lesson. In 2021 the most popular testing library, enzyme, discontinued to make place for react-testing-library (RTL) as the number 1 library. In contradiction to enzyme, RTL didn't add support for shallow rendering, because the creator had a strong belief that it should never be used."}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"why",children:"Why?"}),"\n",(0,s.jsx)(t.h3,{id:"confidence-clarity--regression",children:"Confidence, Clarity & Regression"}),"\n",(0,s.jsx)(t.p,{children:"The amount of confidence & clarity of these tests is best explained when you compare them to unit tests."}),"\n",(0,s.jsx)(t.p,{children:"Unit tests for a single React component would look like this:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"It should call onClick when the button was clicked"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"It should show an error, when hasError is true"}),"."]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"A user interaction test would look like this:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"It should show a validation error, when I submit an invalid form"}),"."]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Which of these tests would you rather write?"}),"\n",(0,s.jsx)(t.p,{children:"User interaction tests are more pleasant to write, because you're testing something that actually feels important."}),"\n",(0,s.jsx)(t.h3,{id:"relieves-e2e-test-responsibilities",children:"Relieves E2E test responsibilities"}),"\n",(0,s.jsxs)(t.p,{children:["As you may know, ",(0,s.jsx)(t.a,{href:"/docs/extra/test-categories/e2e-tests",children:"E2E tests"}),", that spin up your entire application, are costly. So if there's an opportunity that you don't need one, you should take it. Many features in an application are purely frontend, and it's much better to write a low cost user interaction test for these. You should only write an E2E test when a feature has dependencies external to your frontend, such as api-calls to a backend."]}),"\n",(0,s.jsx)(t.h2,{id:"how",children:"How?"}),"\n",(0,s.jsx)(t.h3,{id:"what-not-to-mock",children:"What (not) to mock?"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Never mock components!"})}),"\n",(0,s.jsx)(t.p,{children:"In React, behavior is usually spread across multiple components, which are connected by properties, callbacks and contexts. If you mock some of these components, then you also mock their share of behavior, which leads to misleading tests and a false sense of security."}),"\n",(0,s.jsxs)(t.p,{children:["Mocking components also locks you out of using RTL's recommended queries, such as ",(0,s.jsx)(t.code,{children:"getByRole"})," and ",(0,s.jsx)(t.code,{children:"getByText"}),"."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Only mock API calls!"})}),"\n",(0,s.jsx)(t.p,{children:"We are not writing E2E tests. Mock your API calls."}),"\n",(0,s.jsx)(t.p,{children:'Although, make sure you follow the API mocking guidelines, otherwise you may end up in a "mocking hell".'}),"\n",(0,s.jsx)(t.h3,{id:"where-to-put-these-tests",children:"Where to put these tests?"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Put your behavior test next to the component which manages that behavior."})}),"\n",(0,s.jsx)(t.p,{children:"For example, imagine a page which contains a list of people which can be filtered with a searchbox."}),"\n",(0,s.jsx)("img",{src:n(6092).A,width:"500"}),"\n",(0,s.jsx)(t.p,{children:"Let's say, we want to write this test:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:'it("only shows people that I searched for", () => {});\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Then the test file for ",(0,s.jsx)(t.code,{children:"PeopleView"})," would be the correct place to put it, because it has ",(0,s.jsx)(t.code,{children:"SearchField"}),", ",(0,s.jsx)(t.code,{children:"SearchButton"})," and ",(0,s.jsx)(t.code,{children:"PersonList"})," in scope, which are all required to manage which people are shown."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:'function PeopleView() {\r\n  const allPeople = ["alex", "john"];\r\n\r\n  const [shownPeople, setShownPeople] = useState<Person[]>(allPeople);\r\n  const [searchText, setSearchText] = useState<string>();\r\n\r\n  const filterPeople = () => {\r\n    setShownPeople(allPeople.filter((p) => p.includes(searchText));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <SearchField onChange={(text) => setSearchText(text)} />\r\n      <SearchButton onClick={() => filterPeople()} />\r\n      <PersonList people={shownPeople} />\r\n    </>\r\n  );\r\n}\n'})}),"\n",(0,s.jsxs)(t.h3,{id:"dont-query-by-data-testid-persevere",children:["Don't query by data-testid! ","\ud83d\ude23"]}),"\n",(0,s.jsxs)(t.p,{children:["The query ",(0,s.jsx)(t.code,{children:"getByTestId"})," should be a last resort when writing behavior tests."]}),"\n",(0,s.jsx)(t.p,{children:"Quoting @testing-library/react:"}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsx)(t.p,{children:"The user cannot see (or hear) these, so this is only recommended for cases where you can't match by role or text or it doesn't make sense (e.g. the text is dynamic)."}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["Instead, use ",(0,s.jsx)(t.code,{children:"getByRole"})," or ",(0,s.jsx)(t.code,{children:"getByText"}),", as recommended in ",(0,s.jsx)(t.a,{href:"https://testing-library.com/docs/queries/about#priority",children:"RTL's priority list"}),"."]}),"\n",(0,s.jsx)(t.h3,{id:"follow-rtls-recommendations",children:"Follow RTL's recommendations"}),"\n",(0,s.jsx)(t.p,{children:"There are many more RTL recommendations that you can find in their documentation. Here are a few important ones:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Use ",(0,s.jsx)(t.a,{href:"https://testing-library.com/docs/queries/about#screen",children:"screen"})," to query DOM elements."]}),"\n",(0,s.jsxs)(t.li,{children:["Use ",(0,s.jsx)(t.a,{href:"https://testing-library.com/docs/user-event/intro",children:"user-event"}),", instead of fire-event."]}),"\n"]})]})}function d(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},6092:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/people-search-d43f266a0d780177b271ac2e775d1a32.png"},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>l});var s=n(6540);const r={},o=s.createContext(r);function i(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);